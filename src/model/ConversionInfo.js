/**
 * tradewatch.io
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConversionInfo model module.
 * @module model/ConversionInfo
 * @version 3.1.0
 */
class ConversionInfo {
    /**
     * Constructs a new <code>ConversionInfo</code>.
     * @alias module:model/ConversionInfo
     * @param timestamp {Number} 
     * @param rate {Number} 
     */
    constructor(timestamp, rate) { 
        
        ConversionInfo.initialize(this, timestamp, rate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timestamp, rate) { 
        obj['timestamp'] = timestamp;
        obj['rate'] = rate;
    }

    /**
     * Constructs a <code>ConversionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversionInfo} obj Optional instance to populate.
     * @return {module:model/ConversionInfo} The populated <code>ConversionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversionInfo();

            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversionInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConversionInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ConversionInfo.RequiredProperties = ["timestamp", "rate"];

/**
 * @member {Number} timestamp
 */
ConversionInfo.prototype['timestamp'] = undefined;

/**
 * @member {Number} rate
 */
ConversionInfo.prototype['rate'] = undefined;






export default ConversionInfo;

